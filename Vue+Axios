
-------------------------------------------------------------------
【webpack】
mkdir webpack-demo && cd webpack-demo
npm init -y(这是跳过配置)
npm install webpack webpack-cli --save-dev
(移除 main 入口：)
+   "private": true,
-   "main": "index.js",

-------------------------------------------------------------------
【webpack】
第一步：
mkdir webpack-demo && cd webpack-demo
npm init
创建目录src + components 及 index.html + main.js文件
第二步：
npm install webpack webpack-cli webpack-dev-server --save-dev
npm install vue-loader vue-html-loader css-loader vue-style-loader vue-hot-reload-api --save-dev
npm install babel-loader@7 babel-core babel-plugin-transform-runtime babel-preset-es2015 --save-dev
npm install babel-runtime@5 --save-dev
npm install vue --save

npm install html-webpack-plugin --save-dev   【webpack.config.js ---> var HtmlWebpackPlugin = require('html-webpack-plugin') && plugins: [new HtmlWebpackPlugin()]】
npm install --save-dev css-loader style-loader  【webpack.config.js ---> module: {rules: [{test: /\.css$/, use: ['style-loader', 'css-loader']}]}】
npm install sass-loader node-sass --save-dev   【test: /\.scss$/, use: ['style-loader', 'css-loader', 'sass-loader']】
npm install --save-dev extract-text-webpack-plugin  【把 CSS 分离成文件  const ExtractTextPlugin = require('extract-text-webpack-plugin');  new ExtracTextPlugin('style.css')  test: /\.scss$/, use: ExtractTextPlugin.extract({fallback: 'style-loader', （//resolve-url-loader may be chained before sass-loader if necessary） use: ['css-loader', 'sass-loader']})】
npm install --save-dev webpack-dev-server
-------------------------------------------------------------------

【安装Vue最新稳定版】
npm install vue
【全局安装 vue-cli】
npm install --global vue-cli
【创建一个基于 webpack 模板的新项目】
vue init webpack projectName
【进入项目，安装并运行】
cd projectName
npm install
npm run dev

【安装axios】（-D = --save-dev）
npm install axios -D

【Vue.js 路由】
npm install vue-router

【Vuex】
npm install vuex -S

【ElementUI】
npm i element-ui -S
-------------------------------------------------------------------

i                  install的缩写
-S               --save的缩写
-D              --save-dev缩写
--save         安装包信息将加入到dependencies（生产阶段的依赖）
--save-dev  安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它
-------------------------------------------------------------------

Project name：                                               项目名称，直接回车，按照括号中默认名字，名字不能有大写字母
Project description (A Vue.js project)：            项目描述
Author ()：                                                      作者
Runtime + Compiler:                                       recommended for most users 运行加编译，既然已经说了推荐，就选它了
Runtime-only:                                                  about 6KB lighter min+gzip, but templates (or any Vue-specificHTML) are ONLY allowed in .vue files - render functions are required elsewhere 仅运行时，已经有推荐了就选择第一个了
Install vue-router? (Y/n)                                   是否安装vue-router，这是官方的路由，大多数情况下都使用，这里就输入“y”后回车即可。
Use ESLint to lint your code? (Y/n)                   是否使用ESLint管理代码，ESLint是个代码风格管理工具，是用来统一代码风格的，一般项目中都会使用。
Pick an ESLint preset (Use arrow keys)              选择一个ESLint预设，编写vue项目时的代码风格，直接y回车
Setup unit tests with Karma + Mocha? (Y/n)    是否安装单元测试，我选择安装y回车
Setup e2e tests with Nightwatch(Y/n)?             是否安装e2e测试 ，我选择安装y回车
-------------------------------------------------------------------

【webpack全局安装】
npm install -g webpack
【安装到你的项目目录】
npm install --save-dev webpack
【初始化项目】
npm init （生成package.json）
-------------------------------------------------------------------

【版本控制】
SVN：开放源代码的版本控制系统，多个人共同开发同一个项目，共用资源。
GIT：分布式版本控制系统，用于敏捷高效地处理项目。它采用了分布式版本库的方式，不必服务器端软件支持，使源代码的发布和交流极其方便。
-------------------------------------------------------------------

【构建工具】
npm：包管理器
Grunt：配置驱动
Gulp：代码驱动
Webpack：单页面模块化管理和打包工具
FIS3：百度团队产品，实现在多页应用中按需加载
Rollup：模块打包工具，专注于ES6的模块化
-------------------------------------------------------------------

【框架】
Miniui
VueJS
ReactJS
-------------------------------------------------------------------

【css】
less：
sass：
-------------------------------------------------------------------

【工具】
RequireJS.js：    JavaScript模块加载器
artTemplate.js：javascript模板引擎
html5shiv.js：   解决ie9以下浏览器对html5新增标签的不识别，并导致CSS不起作用的问题
respond.js：     让不支持css3 Media Query的浏览器包括IE6-IE8等其他浏览器支持查询
-------------------------------------------------------------------

【术语】
SSR  ：Server side rendering                  服务器端渲染
SPA  ：Single Page Application              单页面应用
SEO  ：Search Engine Optimization        搜索引擎优化
REST ：Representational State Transfer  表述性状态转移
-------------------------------------------------------------------

WebGL：一种3D绘图标准，这种绘图技术标准允许把JavaScript和OpenGL ES 2.0结合在一起，通过增加OpenGL ES 2.0的一个JavaScript绑定，WebGL可以为HTML5 Canvas提供硬件3D加速渲染，这样Web开发人员就可以借助系统显卡来在浏览器里更流畅地展示3D场景和模型了，还能创建复杂的导航和数据视觉化
JITs：即时编译器
WebAssembly：一种可以使用非 JavaScript 编程语言编写代码并且能在浏览器上运行的技术方案，使用WebAssembly，可以更快地在 web 应用上运行代码，代码运行速度比 JavaScript 高效
AST：抽象语法树
PubSubJS：发布/订阅，一种异步编程的方法
nvm：node 版本管理器 （https://blog.csdn.net/wulala_hei/article/details/80531166）
-------------------------------------------------------------------

【React】

3、state和props
（1）props 的只读性，组件无论是使用函数声明还是通过 class 声明，都决不能修改自身的 props。

（2）state 的更新可能是异步的，不要依赖它们的值来更新下一个状态。

（3）props 是不可变的，而 state 可以根据与用户交互来改变。state 更新和修改数据，而子组件只能通过 props 来传递数据。 

（4）组件类的 defaultProps 属性为 props 设置默认值。
class App extends React.Component {
    constructor(props) {
        super(props);
        this.state = {name: 'Bob'};
    }
    propTypes: {
        name: React.PropTypes.string.isRequired,
    },
    render() {
        return (
            <h1>Hello, {this.props.name}</h1>
        );
    }
}
App.defaultProps = { name: 'Bob' };

（5）Props 验证，React.PropTypes 提供很多验证器 (validator) 来验证传入数据是否有效
App.propTypes = {
    name: PropTypes.string
};



4、事件处理
<a href="#" onClick={handleClick}>点我</a>
（1）事件绑定属性的命名采用驼峰式写法
（2）不能使用返回 false 的方式阻止默认行为， 你必须明确的使用 e.preventDefault();
（3）事件处理采用箭头函数：onClick={(e) => this.test(name, e)} 问题在于每次渲染test时都会创建不同的回调函数，如果该回调函数作为 prop 传入子组件时，这些组件可能会进行额外的重新渲染
（4）类的方法默认是不会绑定this的，建议使用：this.handleClick = this.handleClick.bind(this); // 这边绑定是必要的, 这样this才能在回调函数中使用
    

5、组件API
设置状态：setState
替换状态：replaceState
设置属性：setProps
替换属性：replaceProps
强制更新：forceUpdate
获取DOM节点：findDOMNode
判断组件挂载状态：isMounted



6、生命周期

componentWillMount：                在渲染前调用,在客户端也在服务端。

componentDidMount：                 在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过
                                                     this.getDOMNode()来进行访问。 如果你想和其他JavaScript框架一起使用，可以在这个方法中调用
                                                     setTimeout, setInterval或者发送AJAX请求等操作(防止异步操作阻塞UI)。

componentWillReceiveProps：       在组件接收到一个新的 prop (更新后)时被调用。这个方法在初始化render时不会被调用。

shouldComponentUpdate：          返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不
                                                     被调用。 可以在你确认不需要更新组件时使用。

componentWillUpdate：               在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。

componentDidUpdate：                在组件完成更新后立即调用。在初始化时不会被调用。

componentWillUnmount：            在组件从 DOM 中移除之前立刻被调用。






-------------------------------------------------------------------

【Vue】
一、模板语法

{{ }} 用于输出对象属性和函数返回值

<div id="app">
    {{ message | capitalize }}
</div>
<li v-for="site in sites">
    {{ site.name }}
</li>
<li v-for="(value, key) in object">
    {{ key }}  {{ value }}
</li>

<style>
.active {
    width: 100px;
    height: 100px;
    background: green;
}
</style>

<script>
new Vue({
    el: '#app',
    data:{
        message: '<h1>菜鸟教程</h1>',
        class1: false，
        seen: true,
        isActive: true,
        activeClass: 'active',
        errorClass: 'text-danger',
        styleObject: {
                color: 'green',
                fontSize: '30px'
        },
        checkedNames: [],
        picked : 'a',
        selected: ''
    },
    filters: {
        capitalize: function (value) {
            if (!value) return ''
            value = value.toString()
            return value.charAt(0).toUpperCase() + value.slice(1)
        }
    },
    computed: {
        // 计算属性的 getter
        reversedMessage: function () {
            // `this` 指向 vm 实例
            return this.message.split('').reverse().join('')
        },
        site: {
            // getter
            get: function () {
                return this.name + ' ' + this.url
            },
             // setter
            set: function (newValue) {
                var names = newValue.split(' ')
                this.name = names[0]
                this.url = names[names.length - 1]
            }
        },
        classObject: function () {
            return {
                base: true,
                active: this.isActive && !this.error.value,
                'text-danger': this.error.value && this.error.type === 'fatal',
            }
        }
    },
    methods: {
        greet: function (event) {
            // `this` 在方法里指当前 Vue 实例
            alert('Hello ' + this.name + '!')
            // `event` 是原生 DOM 事件
            if (event) {
                alert(event.target.tagName)
            }
        },
        say: function (message) {
            alert(message)
        }
    }

});
</script>

-------------------------------------------------------------------

v-html    用于输出 html 代码   message: '<h1>菜鸟教程</h1>'
v-bind    用于属性（缩写 :href=""），设置样式属性：
                                                                          <div class="static" :class="{ active: isActive, 'text-danger': hasError }"></div>
                                       绑定数据里的一个对象：<div v-bind:class="classObject"></div>
                                                          数组语法：<div v-bind:class="[activeClass, errorClass ,isActive ? activeClass : '']"></div>
                                                          内联样式：<div v-bind:style="{ color: activeColor, fontSize: fontSize + 'px' }"></div>
                                                          绑定对象：<div v-bind:style="styleObject"></div>
                                                    绑定多个对象：<div v-bind:style="[baseStyles, overridingStyles]"></div>
                                                                          
                                                                          
                                                                          
v-on          用于事件监听（缩写 @click=""），为 v-on 提供了事件修饰符来处理 DOM 事件细节，如：event.preventDefault() 或 event.stopPropagation()
          直接绑定到一个方法来调用 JavaScript 方法：<button v-on:click="greet">Greet</button>
                                       用内联 JavaScript 语句：<button v-on:click="say('hi')">Say hi</button>
                                                        事件修饰符：.stop  .prevent  .capture  .self  .once
                                                                         <!-- 阻止单击事件冒泡 -->
                                                                         <a v-on:click.stop="doThis"></a>
                                                                         <!-- 提交事件不再重载页面 -->
                                                                         <form v-on:submit.prevent="onSubmit"></form>
                                                                         <!-- 修饰符可以串联  -->
                                                                         <a v-on:click.stop.prevent="doThat"></a>
                                                                         <!-- 只有修饰符 -->
                                                                         <form v-on:submit.prevent></form>
                                                                         <!-- 添加事件侦听器时使用事件捕获模式 -->
                                                                         <div v-on:click.capture="doThis">...</div>
                                                                         <!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->
                                                                         <div v-on:click.self="doThat">...</div>
                                                                         <!-- click 事件只能点击一次，2.1.4版本新增 -->
                                                                         <a v-on:click.once="doThis"></a>
                                                       
-------------------------------------------------------------------

                                                       按键修饰符： （Vue 允许为 v-on 在监听键盘事件时添加按键修饰符，为最常用的按键提供了别名）
                                                                         <!-- 只有在 keyCode 是 13 时调用 vm.submit() -->
                                                                         <input v-on:keyup.13="submit">
                                                                         <!-- 同上 -->
                                                                         <input v-on:keyup.enter="submit">
                                                                         <!-- 缩写语法 -->
                                                                         <input @keyup.enter="submit">
                                                                         <!-- Alt + C -->
                                                                         <input @keyup.alt.67="clear">
                                                                         <!-- Ctrl + Click -->
                                                                         <div @click.ctrl="doSomething">Do something</div>
                                                                         

v-if
v-else-if
v-else
v-show       根据条件展示元素
v-model      input、select、text、checkbox、radio 等表单控件元素中可以使用 v-model 实现双向数据绑定
                                                                         <input v-model="message" placeholder="">
                                                                         <textarea v-model="message2" placeholder=""></textarea>
                                                              复选框：
                                                                         <input type="checkbox" value="1" v-model="checkedNames">
                                                                         <input type="checkbox" value="2" v-model="checkedNames">
                                                                         <input type="checkbox" value="3" v-model="checkedNames">
                                                              单选框：
                                                                         <input type="radio" value="a" v-model="picked">
                                                                         <input type="radio" value="b" v-model="picked">
                                                        select 列表：
                                                                         <select v-model="selected" name="fruit">
                                                                             <option value="">选择一个网站</option>
                                                                             <option value="www.a.com">Runoob</option>
                                                                             <option value="www.b.com">Google</option>
                                                                         </select>
                                                              修饰符：
                                                                  .lazy（在默认情况下， v-model 在 input 事件中同步输入框的值与数据，但可以添加lazy ，转变为在 change 事件中同步）
                                                                         <!-- 在 "change" 而不是 "input" 事件中更新 -->
                                                                         <input v-model.lazy="msg" >
                                                                  .number（自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值）
                                                                         <input v-model.number="age" type="number">
                                                                  .trim（自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入）
                                                                         <input v-model.trim="msg">
v-for          site in sites形式

过滤器 filters: {}
计算属性关键词: computed
（
computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值
methods ，在重新渲染的时候，函数总会重新调用执行
computed 性能会更好，但如果不希望缓存，可以使用 methods 属性
computed 属性默认只有 getter ，不过在需要时也可以提供一个 setter
）
监听属性：$watch('counter',function() {})

-------------------------------------------------------------------
1.
v-html 指令用于输出 html 代码
<div v-html="message"></div>

2.
HTML 属性中的值使用 v-bind 指令
<div v-bind:class="{'class1': class1}"></div>

3.
指令是带有 v- 前缀的特殊属性
<p v-if="seen">现在你看到我了</p>
<!-- Handlebars 模板 -->
{{#if ok}}
  <h1>Yes</h1>
{{/if}}
<a v-on:click="doSomething">

4. 自定义过滤器
自定义过滤器，被用作一些常见的文本格式化。由"管道符 | "指示，可以串联
<!-- 在两个大括号中 -->
{{ message | capitalize }}
<!-- 在 v-bind 指令中 -->
<div v-bind:id="rawId | formatId"></div>

6. props 父组件传递到子组件
(1)
prop 是父组件用来传递数据的一个自定义属性。（prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来）
父组件的数据需要通过 props 把数据传给子组件，子组件需要显式地用 props 选项声明 "prop"：props: ['message'],
(2)
动态 Prop，类似于用 v-bind 绑定 HTML 特性到一个表达式，也可以用 v-bind 动态绑定 props 的值到父组件的数据中。每当父组件的数据变化时，该变化也会传导给子组件
(3)
prop 是一个对象而不是字符串数组时，它包含验证要求

7. 子组件传递到父组件
子组件要把数据传递回去，需要使用自定义事件，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件
使用 $on(eventName) 监听事件
使用 $emit(eventName) 触发事件
监听一个原生事件，可以使用 .native 修饰 v-on：<my-component v-on:click.native="doTheThing"></my-component>

8. 自定义指令
(1) 注册一个全局指令
<input v-focus>
Vue.directive('focus', {
  // 当绑定元素插入到 DOM 中。
    inserted: function (el) {
        // 聚焦元素
        el.focus()
    }
})
(2) 使用 directives 选项来注册局部指令
directives: {
    // 注册一个局部的自定义指令 v-focus
    focus: {
      // 指令的定义
        inserted: function (el) {
            // 聚焦元素
            el.focus()
        }
    }
}

9. 钩子函数
指令定义函数提供了几个钩子函数：
bind:                            只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。
inserted:                       被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。
update:                        被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新。
componentUpdated:    被绑定元素所在模板完成一次更新周期时调用。
unbind:                        只调用一次， 指令与元素解绑时调用。

钩子函数的参数有：
el:                               指令所绑定的元素，可以用来直接操作 DOM 。
binding:                      一个对象，包含以下属性：
name:                         指令名，不包括 v- 前缀。
value:                         指令的绑定值， 例如： v-my-directive="1 + 1", value 的值是 2。
oldValue:                    指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。
expression:                 绑定值的表达式或变量名。 例如 v-my-directive="1 + 1" ， expression 的值是 "1 + 1"。
arg:                            传给指令的参数。例如 v-my-directive:foo， arg 的值是 "foo"。
modifiers:                   一个包含修饰符的对象。 例如： v-my-directive.foo.bar, 修饰符对象 modifiers 的值是 { foo: true, bar: true }。
vnode: Vue                编译生成的虚拟节点。
oldVnode:                 上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。

10. 路由
<p>
    <!-- 使用 router-link 组件来导航. -->
    <!-- 通过传入 `to` 属性指定链接. -->
    <!-- <router-link> 默认会被渲染成一个 `<a>` 标签 -->
    <router-link to="/foo">Go to Foo</router-link>
    <router-link to="/bar">Go to Bar</router-link>
</p>
<!-- 路由出口 -->
<!-- 路由匹配到的组件将渲染在这里 -->
<router-view></router-view>
-------------------------------------------------------------------------
<router-link> 相关属性：
to                            表示目标路由的链接。 当被点击后，内部会立刻把 to 的值传到 router.push()，所以这个值可以是一个字符串或者是描述目标位置的对象。
replace                    设置 replace 属性的话，当点击时，会调用 router.replace() 而不是 router.push()，导航后不会留下 history 记录。
append                   设置 append 属性后，则在当前 (相对) 路径前添加基路径。例如，我们从 /a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b
tag                          有时候想要 <router-link> 渲染成某种标签，例如 <li>。 于是我们使用 tag prop 类指定何种标签，同样它还是会监听点击，触发导航。
active-class              设置 链接激活时使用的 CSS 类名。
exact-active-class     配置当链接被精确匹配的时候应该激活的 class。
event                       声明可以用来触发导航的事件。可以是一个字符串或是一个包含字符串的数组。


11. 过渡 & 动画
<transition name = "fade">
    <p v-show = "show" v-bind:style = "styleobj">动画实例</p>
</transition>

12. 混入 (mixins)
定义了一部分可复用的方法或者计算属性。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。

13. ref用来给元素或子组件注册引用信息，
<div id="app">
    <user-component ref="thisrefval"></user-component>
</div>
使用ref为子组件指定一个引用ID：
var parent = new Vue({el: '#app'});
var child = parent.$refs.thisrefval;

14. 




【Vuex】
专为 Vue.js 应用程序开发的状态管理模式
Vuex 的状态存储是响应式的
改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation
const store = new Vuex.Store({
    state: {
        count: 0
    },
    mutations: {
        increment (state) {
            state.count++
        }
    }
});
store.commit('increment')
console.log(store.state.count)  // 1



